.constant
	OBJREF 0x40
	endline 0x3b
.end-constant

.main
    .var
        x
        y
        z
    .end-var

    // input di x, y e z

    LDC_W OBJREF
    INVOKEVIRTUAL input
        ISTORE x

    LDC_W OBJREF
    INVOKEVIRTUAL input
        ISTORE y

    LDC_W OBJREF
    INVOKEVIRTUAL input
        ISTORE z

    // print fun1(y,fun2(y,z+x)) + fun2(x,z) +x%3

    LDC_W OBJREF
            // fun1(y, risultato di fun2)
            LDC_W OBJREF
                ILOAD y
                // fun2(y, z+x)
                LDC_W OBJREF
                    ILOAD y
                        ILOAD z
                        ILOAD x
                    IADD
                INVOKEVIRTUAL fun2
            INVOKEVIRTUAL fun1

            // fun2(x, z)
            LDC_W OBJREF
                ILOAD x
                ILOAD z
            INVOKEVIRTUAL fun2

            // mod(x, 3), cio√® x%3
            LDC_W OBJREF
                ILOAD x
                BIPUSH 3
            INVOKEVIRTUAL mod

        // risultato di fun1 + risultato di fun2
        IADD
        // risultato dell'addizione + risultato di mod
        IADD
    // sullo stack rimane solo il risultato dell'ultima addizione, viene stampato quello
    INVOKEVIRTUAL print
    HALT
.end-main

.method fun1(a, b)
    .var
        i
    .end-var

    BIPUSH 4
    ISTORE i

    // i-8<0
    condizione:
            ILOAD i
            BIPUSH 8
        ISUB
    IFLT loop
    GOTO dopoloop

    loop:
        IINC a 2
        IINC i 1
    GOTO condizione
    dopoloop:

    // if(5-a<0)
            BIPUSH 5
            ILOAD a
        ISUB
    IFLT vero
    GOTO falso

    // a = a + b/2
    vero:
            LDC_W OBJREF
                ILOAD b
                BIPUSH 2
            INVOKEVIRTUAL div
            ILOAD a
        IADD
    ISTORE a
    GOTO dopoif

    falso:
        IINC b -2
    dopoif:

    // return a%4 + a+b
            LDC_W OBJREF
                ILOAD a
                BIPUSH 4
            INVOKEVIRTUAL mod
            ILOAD a
            ILOAD b
        IADD
        IADD
    IRETURN
.end-method

.method fun2(a, b)
    // while(a-b<0)
    condizione:
            ILOAD a
            ILOAD b
        ISUB
    IFLT loop
    GOTO dopoloop

    loop:
        IINC a 2
        GOTO condizione
    dopoloop:

    // if(b+2-a<0)
                ILOAD b
                BIPUSH 2
            IADD
            ILOAD a
        ISUB
    IFLT vero
    GOTO falso

    vero:
        IINC b -1
    GOTO dopoif

    falso:
        IINC b 3
        IINC a 4
    dopoif:

    // return b/3 + a
            LDC_W OBJREF
                ILOAD b
                BIPUSH 3
            INVOKEVIRTUAL div
            ILOAD a
        IADD
    IRETURN
.end-method

.method mul(i, j)
    ILOAD j
    IFEQ zero
    IINC j  -1
    ILOAD i
    IFEQ zero
    LDC_W OBJREF
    ILOAD i
    ILOAD j
    INVOKEVIRTUAL mul
    ILOAD i
	IADD
	GOTO fine
zero:
	BIPUSH 0x0
fine:
	IRETURN
.end-method


.method mod (a, b)
	ILOAD a
	IFEQ stop
	ILOAD a
	ILOAD b
	ISUB
	IFLT stop
	LDC_W OBJREF
	ILOAD a
	ILOAD b
	ISUB
	ILOAD b
	INVOKEVIRTUAL mod
	GOTO fine
stop:
	ILOAD a
fine:
	IRETURN
.end-method

.method div (a, b)
	ILOAD a
	ILOAD b
	ISUB
	IFLT stop
	LDC_W OBJREF
	ILOAD a
	ILOAD b
	ISUB
	ILOAD b
	INVOKEVIRTUAL div
	BIPUSH 1
	IADD
	GOTO fine
stop:
	BIPUSH 0x0
fine:
	IRETURN
.end-method

.method input()
	.var
		num
	.end-var

	BIPUSH 0x0
	ISTORE num

loop:
	IN
	DUP

	LDC_W ENDLINE
	ISUB
	IFEQ stop

	BIPUSH 0x30
	ISUB

	LDC_W OBJREF
	ILOAD num
	BIPUSH 10
	INVOKEVIRTUAL mul

	IADD
	ISTORE num
	GOTO loop

stop:
	ILOAD num
	IRETURN

.end-method


.method print(x)
	ILOAD x
	IFEQ printz

	LDC_W OBJREF
	ILOAD x
	INVOKEVIRTUAL print_digits
	GOTO end
printz:
	BIPUSH 0x30
	OUT
end:

	BIPUSH 0
	IRETURN
.end-method

.method print_digits(x)
	.var
		char
	.end-var

	ILOAD x
	IFEQ end

	LDC_W OBJREF
	ILOAD x
	BIPUSH 10
	INVOKEVIRTUAL mod

	BIPUSH 0x30
	IADD
	ISTORE char

	LDC_W OBJREF
	ILOAD x
	BIPUSH 10
	INVOKEVIRTUAL div

	LDC_W OBJREF
	SWAP
	INVOKEVIRTUAL print_digits

	ILOAD char
	OUT

end:
	BIPUSH 0
	IRETURN
.end-method
