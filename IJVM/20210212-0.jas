.constant
	OBJREF 0x40
	endline 0x3b
.end-constant

.main
.var
x
y
fun1xx
fun2yx
fun1xfun2yx
ris
.end-var

// input(x)
LDC_W OBJREF
INVOKEVIRTUAL input
ISTORE x

// input(y)
LDC_W OBJREF
INVOKEVIRTUAL input
ISTORE y

// fun1(x, x)
LDC_W OBJREF
ILOAD x
ILOAD x
INVOKEVIRTUAL fun1
ISTORE fun1xx

// fun2(y, x)
LDC_W OBJREF
ILOAD y
ILOAD x
INVOKEVIRTUAL fun2
ISTORE fun2yx

// fun1(x, fun2(y, x))
LDC_W OBJREF
ILOAD x
ILOAD fun2yx
INVOKEVIRTUAL fun1
ISTORE fun1xfun2yx

// ris = fun1(x, x) - fun1(x, fun2(y, x))
ILOAD fun1xx
ILOAD fun1xfun2yx
ISUB
ISTORE ris

// print(ris)
LDC_W OBJREF
ILOAD ris
INVOKEVIRTUAL print
.end-main

.method fun1(a, b)

// if(a%2 == 0): if1
LDC_W OBJREF
ILOAD a
BIPUSH 2
INVOKEVIRTUAL mod

// se è vero, va al ramo vero, altrimenti va al ramo falso
IFEQ if1vero
GOTO if1falso

if1vero:

// while(b+4-a < 0)
condizionewhile:
ILOAD b
BIPUSH 4
IADD
ILOAD a
ISUB
// se è vero, procede con il loop, altrimenti lo salta e passa avanti
IFLT whilevero
GOTO whilefalso

// eseguito il loop, torna su per verificare la condizione di nuovo
whilevero:
// a--
IINC a -1
GOTO condizionewhile

// ramo falso di if1 (else)
if1falso:
// if(!(a - b/2 < 0)): if2
// se è nonminore, allora è maggiore o uguale
ILOAD a
LDC_W OBJREF
ILOAD b
BIPUSH 2
INVOKEVIRTUAL div
ISUB

// se è vero, vai avanti, se è falso, salta le istruzioni
// il ramo falso è vuoto, quindi il ramo vero non ha niente dal saltare
IFLT if2falso

// ramo vero di if2
IINC a 3

// si esce da if2 e anche da while
if2falso:
whilefalso:

// return a+b
ILOAD a
ILOAD b
IADD
IRETURN
.end-method

.method fun2(b, c)

// var g = 10
.var
g
.end-var
BIPUSH 10
ISTORE g

// if(g-b-c<0)
ILOAD g
ILOAD b
ILOAD c
ISUB
ISUB
IFLT ifvero

// non metto niente nel ramo falso che salti il ramo vero,
// perché il ramo falso ha IRETURN, quindi si esce comunque dal metodo

// ramo falso:
ILOAD b
BIPUSH 5
IADD
IRETURN

// ramo vero:
ifvero:

// while(b + 2 - g < 0)
condizionewhile:
ILOAD b
BIPUSH 2
IADD
ILOAD g
ISUB

// se è vero, vai al loop, altrimenti vai alla fine
IFLT whilevero
GOTO fineif

// loop
whilevero:
// c = b/2 + g
LDC_W OBJREF
ILOAD b
BIPUSH 2
INVOKEVIRTUAL div
ILOAD g
IADD
ISTORE c
// b-- g--
IINC b 1
IINC g -1
// ricontrolla la condizione del loop
GOTO condizionewhile

// SBAGLIATO: non ho messo il ramo falso.
fineif:
LDC_W OBJREF
ILOAD b
ILOAD c
IADD
BIPUSH 3
INVOKEVIRTUAL div
IRETURN
.end-method

.method mul(i, j)
    ILOAD j
    IFEQ zero
    IINC j  -1
    ILOAD i
    IFEQ zero
    LDC_W OBJREF
    ILOAD i
    ILOAD j
    INVOKEVIRTUAL mul
    ILOAD i
	IADD
	GOTO fine
zero:
	BIPUSH 0x0
fine:     
	IRETURN
.end-method


.method mod (a, b)
	ILOAD a
	IFEQ stop
	ILOAD a
	ILOAD b
	ISUB
	IFLT stop
	LDC_W OBJREF
	ILOAD a
	ILOAD b
	ISUB
	ILOAD b
	INVOKEVIRTUAL mod
	GOTO fine
stop:      
	ILOAD a
fine:
	IRETURN
.end-method

.method div (a, b)    
	ILOAD a    
	ILOAD b        
	ISUB        
	IFLT stop    
	LDC_W OBJREF    
	ILOAD a         
	ILOAD b        
	ISUB        
	ILOAD b        
	INVOKEVIRTUAL div
	BIPUSH 1        
	IADD        
	GOTO fine
stop:        
	BIPUSH 0x0    
fine:        
	IRETURN
.end-method

.method input()
	.var
		num
	.end-var
	
	BIPUSH 0x0
	ISTORE num
	
loop:
	IN
	DUP
	
	LDC_W ENDLINE
	ISUB
	IFEQ stop
	
	BIPUSH 0x30
	ISUB
	
	LDC_W OBJREF
	ILOAD num
	BIPUSH 10
	INVOKEVIRTUAL mul
	
	IADD
	ISTORE num
	GOTO loop
	
stop:
	ILOAD num
	IRETURN
	
.end-method


.method print(x)
	ILOAD x
	IFEQ printz
	
	LDC_W OBJREF
	ILOAD x
	INVOKEVIRTUAL print_digits
	GOTO end
printz:
	BIPUSH 0x30
	OUT
end:

	BIPUSH 0
	IRETURN
.end-method

.method print_digits(x)
	.var
		char
	.end-var

	ILOAD x
	IFEQ end
	
	LDC_W OBJREF
	ILOAD x
	BIPUSH 10
	INVOKEVIRTUAL mod
	
	BIPUSH 0x30
	IADD
	ISTORE char
	
	LDC_W OBJREF
	ILOAD x
	BIPUSH 10
	INVOKEVIRTUAL div
	
	LDC_W OBJREF
	SWAP
	INVOKEVIRTUAL print_digits
	
	ILOAD char
	OUT

end:
	BIPUSH 0
	IRETURN
.end-method
