.constant
	OBJREF 0x40
	endline 0x3b
.end-constant

.main
    .var
        x
        y
        z
    .end-var

    LDC_W OBJREF
    INVOKEVIRTUAL input
        ISTORE x

    LDC_W OBJREF
    INVOKEVIRTUAL input
        ISTORE y

    LDC_W OBJREF
    INVOKEVIRTUAL input
        ISTORE z

    LDC_W OBJREF
            // fun1(fun2(x, x+2), y+3)
            LDC_W OBJREF
                LDC_W OBJREF
                    ILOAD x
                        ILOAD x
                        BIPUSH 2
                    IADD
                INVOKEVIRTUAL fun2
                    ILOAD y
                    BIPUSH 3
                IADD
            INVOKEVIRTUAL fun1
            // fun2(y+1, z)
            LDC_W OBJREF
                    ILOAD y
                    BIPUSH 1
                IADD
                ILOAD z
            INVOKEVIRTUAL fun2
        // fun1+fun2
        IADD
            // y%5
            LDC_W OBJREF
                ILOAD y
                BIPUSH 5
            INVOKEVIRTUAL mod
        ISUB // fun1+fun2-y%5
    INVOKEVIRTUAL print
    HALT
.end-main

.method fun1(a, b)
    condizione:
    // while(3-b<0)
            BIPUSH 3
            ILOAD b
        ISUB
    IFLT loop
    GOTO dopowhile

    loop:
        IINC a 1
        IINC b -1
    GOTO condizione
    dopowhile:

    // if(a%3==0)
        LDC_W OBJREF
            ILOAD a
            BIPUSH 3
        INVOKEVIRTUAL mod
    IFEQ vero
    GOTO falso

    vero:
        IINC a 2
    GOTO dopoif

    falso:
        IINC b -1
    dopoif:

    // return a+b-4
            ILOAD a
            ILOAD b
        IADD
            BIPUSH 4
        ISUB
    IRETURN
.end-method

.method fun2(a, b)
    condizione:
    // while(a-b-3<0)
                ILOAD a
                ILOAD b
            ISUB
                BIPUSH 3
            ISUB
        IFLT loop
        GOTO dopowhile

    loop:
        IINC a 2
    GOTO condizione
    dopowhile:

    // if(a-7<0)
            ILOAD a
            BIPUSH 7
        ISUB
    IFLT vero
    GOTO falso

    // b = a/2 + b; a+=3;
    vero:
                LDC_W OBJREF
                    ILOAD a
                    BIPUSH 2
                INVOKEVIRTUAL div
                ILOAD b
            IADD
        ISTORE b
        IINC a 3
    GOTO dopoif

    // b-=2; a+=2;
    falso:
        IINC b -2
        IINC a 2

    dopoif:

    // return a%2 + a+b
            LDC_W OBJREF
                ILOAD a
                BIPUSH 2
            INVOKEVIRTUAL mod
            ILOAD a
            ILOAD b
        IADD
        IADD
    IRETURN
.end-method


.method mul(i, j)
    ILOAD j
    IFEQ zero
    IINC j  -1
    ILOAD i
    IFEQ zero
    LDC_W OBJREF
    ILOAD i
    ILOAD j
    INVOKEVIRTUAL mul
    ILOAD i
	IADD
	GOTO fine
zero:
	BIPUSH 0x0
fine:
	IRETURN
.end-method


.method mod (a, b)
	ILOAD a
	IFEQ stop
	ILOAD a
	ILOAD b
	ISUB
	IFLT stop
	LDC_W OBJREF
	ILOAD a
	ILOAD b
	ISUB
	ILOAD b
	INVOKEVIRTUAL mod
	GOTO fine
stop:
	ILOAD a
fine:
	IRETURN
.end-method

.method div (a, b)
	ILOAD a
	ILOAD b
	ISUB
	IFLT stop
	LDC_W OBJREF
	ILOAD a
	ILOAD b
	ISUB
	ILOAD b
	INVOKEVIRTUAL div
	BIPUSH 1
	IADD
	GOTO fine
stop:
	BIPUSH 0x0
fine:
	IRETURN
.end-method

.method input()
	.var
		num
	.end-var

	BIPUSH 0x0
	ISTORE num

loop:
	IN
	DUP

	LDC_W ENDLINE
	ISUB
	IFEQ stop

	BIPUSH 0x30
	ISUB

	LDC_W OBJREF
	ILOAD num
	BIPUSH 10
	INVOKEVIRTUAL mul

	IADD
	ISTORE num
	GOTO loop

stop:
	ILOAD num
	IRETURN

.end-method


.method print(x)
	ILOAD x
	IFEQ printz

	LDC_W OBJREF
	ILOAD x
	INVOKEVIRTUAL print_digits
	GOTO end
printz:
	BIPUSH 0x30
	OUT
end:

	BIPUSH 0
	IRETURN
.end-method

.method print_digits(x)
	.var
		char
	.end-var

	ILOAD x
	IFEQ end

	LDC_W OBJREF
	ILOAD x
	BIPUSH 10
	INVOKEVIRTUAL mod

	BIPUSH 0x30
	IADD
	ISTORE char

	LDC_W OBJREF
	ILOAD x
	BIPUSH 10
	INVOKEVIRTUAL div

	LDC_W OBJREF
	SWAP
	INVOKEVIRTUAL print_digits

	ILOAD char
	OUT

end:
	BIPUSH 0
	IRETURN
.end-method
