.constant
	OBJREF 0x40
	endline 0x3b
.end-constant

.main
.var
x
y
z
fun1fun2y3 // fun1(fun2(x, x+2), y+3)
fun2xx2 // fun2(x, x+2)
fun2y1z // fun2(x+1, z)
y5 // y%5
ris // fun1(fun2(x,x+2), y+3) + fun2(y+1, z) - y%5
.end-var

// input(x)
LDC_W OBJREF
INVOKEVIRTUAL input
ISTORE x

// input(y)
LDC_W OBJREF
INVOKEVIRTUAL input
ISTORE y

// input(z)
LDC_W OBJREF
INVOKEVIRTUAL input
ISTORE z

// fun2(x, x+2)
LDC_W OBJREF
ILOAD x
ILOAD x
BIPUSH 2
IADD
INVOKEVIRTUAL fun2
ISTORE fun2xx2

// fun1(fun2, y+3)
LDC_W OBJREF
ILOAD fun2xx2
ILOAD y
BIPUSH 3
IADD
INVOKEVIRTUAL fun1
ISTORE fun1fun2y3

// fun2(y+1, z)
LDC_W OBJREF
ILOAD y
BIPUSH 1
IADD
ILOAD z
INVOKEVIRTUAL fun2
ISTORE fun2y1z

// y%5
LDC_W OBJREF
ILOAD y
BIPUSH 5
INVOKEVIRTUAL mod
ISTORE y5

// fun1 + fun2 + y%5
ILOAD fun1fun2y3
ILOAD fun2y1z
ILOAD y5
IADD
IADD
ISTORE ris

// print(ris)
LDC_W OBJREF
ILOAD ris
INVOKEVIRTUAL print
HALT

.end-main

.method fun1(a, b)
// while(3-b<0)
condizionewhile:
BIPUSH 3
ILOAD b
ISUB
// se è vero, vai al loop, altrimenti saltalo
IFLT loop
GOTO dopowhile

loop:
IINC a 1
IINC b -1
// ricontrolla la condizione una volta finito il loop
GOTO condizionewhile

dopowhile:
// if(a%3==0)
LDC_W OBJREF
ILOAD a
BIPUSH 3
INVOKEVIRTUAL mod
// se è vero vai al ramo vero, altrimenti al ramo falso
IFEQ ifvero
GOTO iffalso

// ramo vero
ifvero:
IINC a 2
GOTO dopoif

// ramo falso
iffalso:
IINC b -1

dopoif:
// return(a+b-4)
ILOAD a
IADD
ILOAD b
BIPUSH 4
ISUB
IRETURN
.end-method

.method fun2(a, b)
// while(a-b-3<0)
condizionewhile:
ILOAD a
ILOAD b
ISUB
ILOAD 3
ISUB
IFLT loop
GOTO dopowhile

// a=a+2
loop:
IINC a 2
GOTO condizionewhile
dopowhile:

// if(a-7<0)
ILOAD a
BIPUSH 7
ISUB
IFLT ifvero
GOTO iffalso

ifvero:
// b = a/2 + b
LDC_W OBJREF
ILOAD a
BIPUSH 2
INVOKEVIRTUAL div
ILOAD b
IADD
ISTORE b
// a = a + 3
IINC a 3
GOTO dopoif

iffalso:
IINC b -2
IINC a 2

dopoif:
// return a%2 + b + a
LDC_W OBJREF
ILOAD a
BIPUSH 2
INVOKEVIRTUAL mod
ILOAD b
ILOAD a
IADD
IADD
IRETURN
.end-method


.method mul(i, j)
    ILOAD j
    IFEQ zero
    IINC j  -1
    ILOAD i
    IFEQ zero
    LDC_W OBJREF
    ILOAD i
    ILOAD j
    INVOKEVIRTUAL mul
    ILOAD i
	IADD
	GOTO fine
zero:
	BIPUSH 0x0
fine:     
	IRETURN
.end-method


.method mod (a, b)
	ILOAD a
	IFEQ stop
	ILOAD a
	ILOAD b
	ISUB
	IFLT stop
	LDC_W OBJREF
	ILOAD a
	ILOAD b
	ISUB
	ILOAD b
	INVOKEVIRTUAL mod
	GOTO fine
stop:      
	ILOAD a
fine:
	IRETURN
.end-method

.method div (a, b)    
	ILOAD a    
	ILOAD b        
	ISUB        
	IFLT stop    
	LDC_W OBJREF    
	ILOAD a         
	ILOAD b        
	ISUB        
	ILOAD b        
	INVOKEVIRTUAL div
	BIPUSH 1        
	IADD        
	GOTO fine
stop:        
	BIPUSH 0x0    
fine:        
	IRETURN
.end-method

.method input()
	.var
		num
	.end-var
	
	BIPUSH 0x0
	ISTORE num
	
loop:
	IN
	DUP
	
	LDC_W ENDLINE
	ISUB
	IFEQ stop
	
	BIPUSH 0x30
	ISUB
	
	LDC_W OBJREF
	ILOAD num
	BIPUSH 10
	INVOKEVIRTUAL mul
	
	IADD
	ISTORE num
	GOTO loop
	
stop:
	ILOAD num
	IRETURN
	
.end-method


.method print(x)
	ILOAD x
	IFEQ printz
	
	LDC_W OBJREF
	ILOAD x
	INVOKEVIRTUAL print_digits
	GOTO end
printz:
	BIPUSH 0x30
	OUT
end:

	BIPUSH 0
	IRETURN
.end-method

.method print_digits(x)
	.var
		char
	.end-var

	ILOAD x
	IFEQ end
	
	LDC_W OBJREF
	ILOAD x
	BIPUSH 10
	INVOKEVIRTUAL mod
	
	BIPUSH 0x30
	IADD
	ISTORE char
	
	LDC_W OBJREF
	ILOAD x
	BIPUSH 10
	INVOKEVIRTUAL div
	
	LDC_W OBJREF
	SWAP
	INVOKEVIRTUAL print_digits
	
	ILOAD char
	OUT

end:
	BIPUSH 0
	IRETURN
.end-method
