.constant
	OBJREF 0x40
	endline 0x3b
.end-constant

.main
    .var
        x
        y
        z
        fun2yz
        fun1fun2yzx
        fun2y2x
    .end-var
        LDC_W OBJREF
        INVOKEVIRTUAL input
    ISTORE x
        LDC_W OBJREF
        INVOKEVIRTUAL input
    ISTORE y
        LDC_W OBJREF
        INVOKEVIRTUAL input
    ISTORE z

        LDC_W OBJREF
            ILOAD y
            ILOAD z
        INVOKEVIRTUAL fun2
    ISTORE fun2yz

        LDC_W OBJREF
            ILOAD fun2yz
            ILOAD y
                ILOAD z
                ILOAD x
            IADD
        INVOKEVIRTUAL fun1
    ISTORE fun1fun2yzx

        LDC_W OBJREF
                ILOAD y
                BIPUSH 2
            IADD
            ILOAD x
        INVOKEVIRTUAL fun2
    ISTORE fun2y2x

    LDC_W OBJREF
            ILOAD fun1fun2yzx
            ILOAD fun2y2x
        IADD
    INVOKEVIRTUAL print
    HALT
.end-main

.method fun1(a, b, c)
    condizione1:
        LDC_W OBJREF
            ILOAD a
            BIPUSH 2
        INVOKEVIRTUAL mod
    IFEQ loop1
    GOTO dopo1

    loop1:
                ILOAD b
                BIPUSH 5
            ISUB
        IFLT vero2
        GOTO falso2

        vero2:
                LDC_W OBJREF
                    ILOAD c
                    BIPUSH 3
                INVOKEVIRTUAL mul
            ISTORE a
            IINC c 1
        GOTO dopo2
        falso2:
                LDC_W OBJREF
                    ILOAD b
                    BIPUSH 5
                INVOKEVIRTUAL mul
            ISTORE a
            IINC b 1
        dopo2:
    GOTO condizione1
    dopo1:
        ILOAD c
    IRETURN
.end-method

.method fun2(a, b)
    .var
        i    
    .end-var
                BIPUSH 6
                ILOAD a
            ISUB
            ILOAD b
        ISUB
    IFLT vero3
    GOTO falso3

    vero3:
            BIPUSH 0
        ISTORE i

        condizione4:
                ILOAD i
                BIPUSH 4
            ISUB
        IFLT loop4
        GOTO dopo4

        loop4:
                LDC_W OBJREF
                    ILOAD b
                    BIPUSH 2
                INVOKEVIRTUAL mul
            ISTORE a
        IINC i 1
        GOTO condizione4
        dopo4:
    GOTO dopo3
    falso3:
                ILOAD a
                BIPUSH 2
            IADD
        ISTORE b
        IINC a 3
    dopo3:

            ILOAD a
            ILOAD b
            BIPUSH 1
        IADD
        IADD
    IRETURN
.end-method

.method mul(i, j)
    ILOAD j
    IFEQ zero
    IINC j  -1
    ILOAD i
    IFEQ zero
    LDC_W OBJREF
    ILOAD i
    ILOAD j
    INVOKEVIRTUAL mul
    ILOAD i
	IADD
	GOTO fine
zero:
	BIPUSH 0x0
fine:     
	IRETURN
.end-method


.method mod (a, b)
	ILOAD a
	IFEQ stop
	ILOAD a
	ILOAD b
	ISUB
	IFLT stop
	LDC_W OBJREF
	ILOAD a
	ILOAD b
	ISUB
	ILOAD b
	INVOKEVIRTUAL mod
	GOTO fine
stop:      
	ILOAD a
fine:
	IRETURN
.end-method

.method div (a, b)    
	ILOAD a    
	ILOAD b        
	ISUB        
	IFLT stop    
	LDC_W OBJREF    
	ILOAD a         
	ILOAD b        
	ISUB        
	ILOAD b        
	INVOKEVIRTUAL div
	BIPUSH 1        
	IADD        
	GOTO fine
stop:        
	BIPUSH 0x0    
fine:        
	IRETURN
.end-method

.method input()
	.var
		num
	.end-var
	
	BIPUSH 0x0
	ISTORE num
	
loop:
	IN
	DUP
	
	LDC_W ENDLINE
	ISUB
	IFEQ stop
	
	BIPUSH 0x30
	ISUB
	
	LDC_W OBJREF
	ILOAD num
	BIPUSH 10
	INVOKEVIRTUAL mul
	
	IADD
	ISTORE num
	GOTO loop
	
stop:
	ILOAD num
	IRETURN
	
.end-method


.method print(x)
	ILOAD x
	IFEQ printz
	
	LDC_W OBJREF
	ILOAD x
	INVOKEVIRTUAL print_digits
	GOTO end
printz:
	BIPUSH 0x30
	OUT
end:

	BIPUSH 0
	IRETURN
.end-method

.method print_digits(x)
	.var
		char
	.end-var

	ILOAD x
	IFEQ end
	
	LDC_W OBJREF
	ILOAD x
	BIPUSH 10
	INVOKEVIRTUAL mod
	
	BIPUSH 0x30
	IADD
	ISTORE char
	
	LDC_W OBJREF
	ILOAD x
	BIPUSH 10
	INVOKEVIRTUAL div
	
	LDC_W OBJREF
	SWAP
	INVOKEVIRTUAL print_digits
	
	ILOAD char
	OUT

end:
	BIPUSH 0
	IRETURN
.end-method