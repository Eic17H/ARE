.constant
	OBJREF 0x40
	endline 0x3b
.end-constant

.main
	.var
		x
		y
		z
		fun1fun2y1 // fun1(fun2, y+1)
		fun2xz1 // fun2(x, z+1)
		fun2x3y	// fun2(x+3, y)
		z3 // z/3
	.end-var

	// fun2(x, z+1)
		LDC_W OBJREF
			ILOAD x
				ILOAD z
				BIPUSH 1
			IADD
		INVOKEVIRTUAL fun2
	ISTORE fun2xz1

	// fun1(fun2xz1, y+1)
		LDC_W OBJREF
			ILOAD fun2xz1
				ILOAD y
				BIPUSH 1
			IADD
		INVOKEVIRTUAL fun1
	ISTORE fun1fun2y1
	
	// fun2(x+3, y)
		LDC_W OBJREF
				ILOAD x
				BIPUSH 3
			IADD
			ILOAD y
		INVOKEVIRTUAL fun2
	ISTORE fun2x3y

	// z/3
		LDC_W OBJREF
			ILOAD z
			BIPUSH 3
		INVOKEVIRTUAL div
	ISTORE z3

	// print(fun1fun2y1 + fun2x3y + z3)
	LDC_W OBJREF
			ILOAD fun1fun2y1
			ILOAD fun2x3y
			ILOAD z3
		IADD
		IADD
	INVOKEVIRTUAL print
.end-main

.method fun1(a, b)
	.var
		i
	.end-var
		
	// for(i=1; i<4; i++)

	// i=1
		BIPUSH 1
	ISTORE i

	// i<4 ? esegui il loop : salta il loop
	condizione:
			ILOAD i
			BIPUSH 4
		ISUB
	IFLT loop
	GOTO dopoloop
	
	// b+=3
	// i++
	loop:
		IINC b 3
		IINC i 1
	GOTO condizione
	dopoloop:

	// if(a<b)
			ILOAD a
			ILOAD b
		ISUB
	IFLT vero
	GOTO falso

	// a += b
	vero:
				ILOAD a
				ILOAD b
			IADD
		ISTORE a
	GOTO dopoif

	// b++
	falso:
		IINC b 1
	dopoif:

	// return b+a%3
			ILOAD b
			LDC_OBJREF
				ILOAD a
				BIPUSH 3
			INVOKEVIRTUAL mod
		IADD
	IRETURN
.end-method

.method fun2(a, b)
	// while(a%2==0)
	condizione:
		LDC_W OBJREF
			ILOAD a
			ILOAD 2
		INVOKEVIRTUAL mod
	IFEQ loop
	GOTO dopoloop

	// a++
	loop:
		IINC a 1
	GOTO condizione
	dopoloop:

	// if(a<7)
			ILOAD a
			BIPUSH 7
		ISUB
	IFLT vero
	GOTO falso

	// b+=2
	vero:
		IINC b 2
	GOTO dopoif

	// b+=3 a++
	falso:
		IINC b 3
		IINC a 1
	dopoif:

	// return b-a+4
				ILOAD b
				ILOAD a
			ISUB
			BIPUSH 4
		IADD
	IRETURN
.end-method

.method mul(i, j)
    ILOAD j
    IFEQ zero
    IINC j  -1
    ILOAD i
    IFEQ zero
    LDC_W OBJREF
    ILOAD i
    ILOAD j
    INVOKEVIRTUAL mul
    ILOAD i
	IADD
	GOTO fine
zero:
	BIPUSH 0x0
fine:     
	IRETURN
.end-method


.method mod (a, b)
	ILOAD a
	IFEQ stop
	ILOAD a
	ILOAD b
	ISUB
	IFLT stop
	LDC_W OBJREF
	ILOAD a
	ILOAD b
	ISUB
	ILOAD b
	INVOKEVIRTUAL mod
	GOTO fine
stop:      
	ILOAD a
fine:
	IRETURN
.end-method

.method div (a, b)    
	ILOAD a    
	ILOAD b        
	ISUB        
	IFLT stop    
	LDC_W OBJREF    
	ILOAD a         
	ILOAD b        
	ISUB        
	ILOAD b        
	INVOKEVIRTUAL div
	BIPUSH 1        
	IADD        
	GOTO fine
stop:        
	BIPUSH 0x0    
fine:        
	IRETURN
.end-method

.method input()
	.var
		num
	.end-var
	
	BIPUSH 0x0
	ISTORE num
	
loop:
	IN
	DUP
	
	LDC_W ENDLINE
	ISUB
	IFEQ stop
	
	BIPUSH 0x30
	ISUB
	
	LDC_W OBJREF
	ILOAD num
	BIPUSH 10
	INVOKEVIRTUAL mul
	
	IADD
	ISTORE num
	GOTO loop
	
stop:
	ILOAD num
	IRETURN
	
.end-method


.method print(x)
	ILOAD x
	IFEQ printz
	
	LDC_W OBJREF
	ILOAD x
	INVOKEVIRTUAL print_digits
	GOTO end
printz:
	BIPUSH 0x30
	OUT
end:

	BIPUSH 0
	IRETURN
.end-method

.method print_digits(x)
	.var
		char
	.end-var

	ILOAD x
	IFEQ end
	
	LDC_W OBJREF
	ILOAD x
	BIPUSH 10
	INVOKEVIRTUAL mod
	
	BIPUSH 0x30
	IADD
	ISTORE char
	
	LDC_W OBJREF
	ILOAD x
	BIPUSH 10
	INVOKEVIRTUAL div
	
	LDC_W OBJREF
	SWAP
	INVOKEVIRTUAL print_digits
	
	ILOAD char
	OUT

end:
	BIPUSH 0
	IRETURN
.end-method